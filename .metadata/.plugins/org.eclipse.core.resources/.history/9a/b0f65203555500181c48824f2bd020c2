import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JLabel;

import java.awt.BorderLayout;
import java.awt.GridBagLayout;
import java.awt.Point;

import javax.swing.JButton;
import javax.swing.BoxLayout;

import net.miginfocom.swing.MigLayout;

import java.awt.CardLayout;

import javax.swing.JPanel;

import java.awt.GridLayout;

import javax.swing.border.LineBorder;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;


public class Board{
	
	private Point[][] shapes = new Point[18][5];
	private Point[] past = new Point[5];
	private JFrame frame;
	private JLabel[][] board;
	private JPanel panel;
	private boolean[][] occupied;
	Point[] test;
	int o;
	/**
	 * @wbp.nonvisual location=136,341
	 */

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Board window = new Board();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Board() {
		initialize();
		
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 500, 1000);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		panel = new JPanel();
		panel.setBounds(100, 100, 300, 678);
		frame.getContentPane().add(panel);
		panel.setLayout(new GridLayout(25,13,0,0));
		
		board = new JLabel[25][13];
		for(int i = 0; i < 25; i++){
			for(int j = 0; j < 13; j++){
				board[i][j] = new JLabel();
				board[i][j].setBorder(new LineBorder(Color.black));
				board[i][j].setOpaque(true);
			}
		}
		updateBoard();

		createShapes();
		o = (int)(Math.random() * 18);
		
		//for(int i = 0; i < 5; i++){
		//	board[shapes[o][i].y][shapes[o][i].x].setBackground(Color.red);
		//}
		

		for(int i = 0; i < 5; i++){
			past[i] = new Point(0,0);
		}
		
		occupied = new boolean[board.length][board[0].length];
		for(int i = 0; i < board.length; i++){
			for(int j = 0; j < board[0].length; j++){
				occupied[i][j] = false;
			}
		}
		
		test = new Point[5];
		test[0] = new Point(3, 0);
		test[1] = new Point(4, 0);
		test[2] = new Point(5, 0);
		test[3] = new Point(6, 0);
		test[4] = new Point(7, 0);
		
		
		Timer timer = new Timer();
		TimerTask task = new TimerTask() {
			public void run(){
				if(canMove(shapes[o])){
						for(int i = 0; i < 5; i++){
							board[past[i].y][past[i].x].setBackground(Color.white);
						}
						for(int i = 0; i < 5; i++){
							board[shapes[o][i].y][shapes[o][i].x].setBackground(Color.red);
						}

						for(int i = 0; i < 5; i++){
							past[i] = new Point(shapes[o][i].x,shapes[o][i].y);
						}

						for(int i = 0; i < 5; i++){
							shapes[o][i].y++;
						}
						
					}
				else{
					createShapes();
					boolean complete = true;
					for(int i = 0; i < 5; i++)
						occupied[past[i].y][past[i].x] = true;
					for(int i = 0; i < 5; i++){
						for(int j = 0; j < 13; j++)
							if(!occupied[j][past[i].x])
								complete = false;
						if(complete)
							for(int j = 0; j < 13; j++){
								//occupied[j][past[i].x] = false;
								board[0][0].setBackground(Color.green);
								board[j][past[i].x].setBackground(Color.white);
							}
						past[i] = new Point(0,0);
					}
					o = (int)(Math.random()*18);
					complete = true;
				}
			}

		};
		timer.scheduleAtFixedRate(task, 3000, 200);
		frame.addKeyListener(new KeyListener(){
			
			@Override
			public void keyPressed(KeyEvent e) {
			// TODO Auto-generated method stub
				//System.out.println(KeyEvent.VK_LEFT);
				if(e.getKeyCode() == KeyEvent.VK_LEFT){
					boolean canMove = true;
					for(int i = 0; i < 5; i++)
						if(shapes[o][i].x <= 0)
							canMove = false;
					if(canMove)
						for(int i = 0; i < 5; i++)
							shapes[o][i].x--;
					
				}
				if(e.getKeyCode() == KeyEvent.VK_RIGHT){
					boolean canMove = true;
					for(int i = 0; i < 5; i++)
						if(shapes[o][i].x >= 12)
							canMove = false;
					if(canMove)
						for(int i = 0; i < 5; i++)
							shapes[o][i].x++;
				}
				if(e.getKeyCode() == KeyEvent.VK_UP){
					shapes[o] = rotate(shapes[o]);
				}
			}

			@Override
			public void keyReleased(KeyEvent e) {
			// TODO Auto-generated method stub
			}

			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
			}
		});
		frame.setVisible(true);
	}

	private void updateBoard(){
		panel.removeAll();
		for(int i = 0; i < 25; i++){
			for(int j = 0; j < 13; j++){
				panel.add(board[i][j]);
			}
		}
	}
	
	private void createShapes(){
		//stick
		int x = (int)(Math.random() * 9);
		shapes[0][0] = new Point(x, 0);
		shapes[0][1] = new Point(x + 1, 0);
		shapes[0][2] = new Point(x + 2, 0);
		shapes[0][3] = new Point(x + 3, 0);
		shapes[0][4] = new Point(x + 4, 0);
		
		//cactus
		x = (int)(Math.random() * 11 + 2);
		shapes[1][0] = new Point(x, 0);
		shapes[1][1] = new Point(x - 1, 0);
		shapes[1][2] = new Point(x - 1, 1);
		shapes[1][3] = new Point(x - 2, 1);
		shapes[1][4] = new Point(x - 1, 2);
		
		//bactus
		x = (int)(Math.random() * 11);
		shapes[2][0] = new Point(x, 0);
		shapes[2][1] = new Point(x + 1, 0);
		shapes[2][2] = new Point(x + 1, 1);
		shapes[2][3] = new Point(x + 2, 1);
		shapes[2][4] = new Point(x + 1, 2);
		
		//bell
		x = (int)(Math.random() * 10);
		shapes[3][0] = new Point(x, 0);
		shapes[3][1] = new Point(x + 1, 0);
		shapes[3][2] = new Point(x + 2, 0);
		shapes[3][3] = new Point(x + 3, 0);
		shapes[3][4] = new Point(x + 3, 1);
		
		//ell
		x = (int)(Math.random() * 10 + 3);
		shapes[4][0] = new Point(x, 0);
		shapes[4][1] = new Point(x - 1, 0);
		shapes[4][2] = new Point(x - 2, 0);
		shapes[4][3] = new Point(x - 3, 0);
		shapes[4][4] = new Point(x - 3, 1);
		
		//right thumb
		x = (int)(Math.random() * 11 + 2);
		shapes[5][0] = new Point(x, 0);
		shapes[5][1] = new Point(x - 1, 1);
		shapes[5][2] = new Point(x - 1, 0);
		shapes[5][3] = new Point(x - 2, 0);
		shapes[5][4] = new Point(x - 2, 1);
		
		//left thumb
		x = (int)(Math.random() * 11);
		shapes[6][0] = new Point(x, 0);
		shapes[6][1] = new Point(x + 1, 1);
		shapes[6][2] = new Point(x + 1, 0);
		shapes[6][3] = new Point(x + 2, 0);
		shapes[6][4] = new Point(x + 2, 1);
		
		//balash
		x = (int)(Math.random() * 10);
		shapes[7][0] = new Point(x, 0);
		shapes[7][1] = new Point(x + 1, 0);
		shapes[7][2] = new Point(x + 2, 0);
		shapes[7][3] = new Point(x + 2, 1);
		shapes[7][4] = new Point(x + 3, 1);
	
		//flash
		x = (int)(Math.random() * 10 + 3);
		shapes[8][0] = new Point(x, 0);
		shapes[8][1] = new Point(x - 1, 0);
		shapes[8][2] = new Point(x - 2, 0);
		shapes[8][3] = new Point(x - 2, 1);
		shapes[8][4] = new Point(x - 3, 1);
	
		//T
		x = (int)(Math.random() * 11);
		shapes[9][0] = new Point(x, 0);
		shapes[9][1] = new Point(x + 2, 0);
		shapes[9][2] = new Point(x + 1, 0);
		shapes[9][3] = new Point(x + 1, 1);
		shapes[9][4] = new Point(x + 1, 2);
		
		//U
		x = (int)(Math.random() * 11);
		shapes[10][0] = new Point(x, 0);
		shapes[10][1] = new Point(x, 1);
		shapes[10][2] = new Point(x + 1, 1);
		shapes[10][3] = new Point(x + 2, 1);
		shapes[10][4] = new Point(x + 2, 0);
		
		//Purp
		x = (int)(Math.random() * 11);
		shapes[11][0] = new Point(x, 0);
		shapes[11][1] = new Point(x + 1, 0);
		shapes[11][2] = new Point(x + 2, 0);
		shapes[11][3] = new Point(x + 2, 1);
		shapes[11][4] = new Point(x + 2, 2);
		
		//matt
		x = (int)(Math.random() * 11);
		shapes[12][0] = new Point(x, 0);
		shapes[12][1] = new Point(x + 1, 0);
		shapes[12][2] = new Point(x + 1, 1);
		shapes[12][3] = new Point(x + 2, 1);
		shapes[12][4] = new Point(x + 2, 2);
		
		//fidget spinner
		x = (int)(Math.random() * 11);
		shapes[13][0] = new Point(x, 1);
		shapes[13][1] = new Point(x + 1, 0);
		shapes[13][2] = new Point(x + 1, 1);
		shapes[13][3] = new Point(x + 1, 2);
		shapes[13][4] = new Point(x + 2, 1);
		
		//left ax
		x = (int)(Math.random() * 10);
		shapes[14][0] = new Point(x, 0);
		shapes[14][1] = new Point(x + 1, 1);
		shapes[14][2] = new Point(x + 1, 0);
		shapes[14][3] = new Point(x + 2, 0);
		shapes[14][4] = new Point(x + 3, 0);
		
		//right ax
		x = (int)(Math.random() * 10);
		shapes[15][0] = new Point(x, 0);
		shapes[15][1] = new Point(x + 1, 0);
		shapes[15][2] = new Point(x + 2, 0);
		shapes[15][3] = new Point(x + 2, 1);
		shapes[15][4] = new Point(x + 3, 0);
		
		//zebra
		x = (int)(Math.random() * 11);
		shapes[16][0] = new Point(x, 0);
		shapes[16][1] = new Point(x, 1);
		shapes[16][2] = new Point(x + 1, 1);
		shapes[16][3] = new Point(x + 2, 1);
		shapes[16][4] = new Point(x + 2, 2);
		
		//arbez
		x = (int)(Math.random() * 11 + 3);
		shapes[17][0] = new Point(x, 0);
		shapes[17][1] = new Point(x, 1);
		shapes[17][2] = new Point(x - 1, 1);
		shapes[17][3] = new Point(x - 2, 1);
		shapes[17][4] = new Point(x - 2, 2);
	}
	
	private Point[] rotate(Point[] shape){
		int x;
		int y;
		Point[] p = new Point[5];
		for(int i = 0; i < 5; i++){
			p[i] = new Point(0,0);
			p[i].x = shape[2].x + (shape[2].y - shape[i].y);
			if(p[i].x < 0 || p[i].x > 12)
				return shape;
			p[i].y = shape[2].y - (shape[2].x - shape[i].x);
			if(p[i].y < 0 || p[i].y > 23)
				return shape;
			if(occupied[p[i].y][p[i].x] || occupied[p[i].y + 1][p[i].x])
				return shape;
		}
		return p;
	}
	
	private boolean canMove(Point[] shape){
		for(int i = 0; i < 5; i++)
			if(shapes[o][i].y >= 25)
				return false;
		for(int i = 0; i < 5; i++)
			if(shapes[o][i].y != 24)
				if(occupied[shapes[o][i].y][shapes[o][i].x])
					return false;
		return true;
	}
	
	private Point[] getPoints(){
		return null;
	}
}

